// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum ActivityType {
  meditation
  exercise
  walking
  reading
  journaling
  therapy
}

enum ChatRole {
  user
  assistant
}

enum ChatStatus {
  active
  completed
  archived
}

model User {
  id             String    @id @default(uuid())
  email          String    @unique
  name           String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  emailVerified   Boolean
  image          String?
  sessions       Session[]
  accounts       Account[]
  chatSessions   ChatSession[]
  activities     Activity[]
  moods          Mood[]
  @@index([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier  String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Activity {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  type        ActivityType
  name        String
  description String?   // optional
  duration    Int?      // optional, >= 0 
  timestamp   DateTime  @default(now())

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId, timestamp])
}

model ChatSession {
  id        String        @id @default(uuid())
  sessionId String        @unique
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  startTime DateTime
  status    ChatStatus

  messages  ChatMessage[]

  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([userId, startTime])
}

model ChatMessage {
  id        String        @id @default(uuid())
  sessionId String
  session   ChatSession   @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  role      ChatRole
  content   String
  timestamp DateTime

  // metadata
  metadata  Json?         // store full metadata object in JSON (flexible)

  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Mood {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  score     Int
  note      String?
  timestamp DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, timestamp])
}
